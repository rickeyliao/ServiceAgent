// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

package rpccmdservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("config.proto", fileDescriptor_3eaf2c85e69e9ea4) }

var fileDescriptor_3eaf2c85e69e9ea4 = []byte{
	// 116 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0x4b,
	0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2d, 0x2a, 0x48, 0x4e, 0xce, 0x4d,
	0x29, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x95, 0xe2, 0x4d, 0x49, 0x4d, 0x4b, 0x2c, 0xcd, 0x29,
	0x81, 0xc8, 0x1a, 0xc5, 0xc1, 0x54, 0x27, 0x67, 0x24, 0xe6, 0xa5, 0xa7, 0x0a, 0xf9, 0x71, 0xf1,
	0x38, 0x83, 0x59, 0xce, 0x60, 0x51, 0x21, 0x05, 0x3d, 0x14, 0xed, 0x7a, 0x2e, 0x10, 0xdd, 0x41,
	0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0xbe, 0xc5, 0xe9, 0x52, 0x52, 0xb8, 0x54, 0x14, 0x17, 0x28,
	0x31, 0x24, 0xb1, 0x81, 0xad, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x22, 0x87, 0x84,
	0x94, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigchangeClient is the client API for Configchange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigchangeClient interface {
	ChangeConfig(ctx context.Context, in *DefaultRequestMsg, opts ...grpc.CallOption) (*DefaultResp, error)
}

type configchangeClient struct {
	cc *grpc.ClientConn
}

func NewConfigchangeClient(cc *grpc.ClientConn) ConfigchangeClient {
	return &configchangeClient{cc}
}

func (c *configchangeClient) ChangeConfig(ctx context.Context, in *DefaultRequestMsg, opts ...grpc.CallOption) (*DefaultResp, error) {
	out := new(DefaultResp)
	err := c.cc.Invoke(ctx, "/rpccmdservice.configchange/ChangeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigchangeServer is the server API for Configchange service.
type ConfigchangeServer interface {
	ChangeConfig(context.Context, *DefaultRequestMsg) (*DefaultResp, error)
}

func RegisterConfigchangeServer(s *grpc.Server, srv ConfigchangeServer) {
	s.RegisterService(&_Configchange_serviceDesc, srv)
}

func _Configchange_ChangeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigchangeServer).ChangeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpccmdservice.configchange/ChangeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigchangeServer).ChangeConfig(ctx, req.(*DefaultRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Configchange_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpccmdservice.configchange",
	HandlerType: (*ConfigchangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeConfig",
			Handler:    _Configchange_ChangeConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}
