// Code generated by protoc-gen-go. DO NOT EDIT.
// source: homeip.proto

package rpccmdservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HomeIPShowReq struct {
	Nbsaddr              string   `protobuf:"bytes,1,opt,name=nbsaddr,proto3" json:"nbsaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HomeIPShowReq) Reset()         { *m = HomeIPShowReq{} }
func (m *HomeIPShowReq) String() string { return proto.CompactTextString(m) }
func (*HomeIPShowReq) ProtoMessage()    {}
func (*HomeIPShowReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_08ae62cb4bdd4ec2, []int{0}
}

func (m *HomeIPShowReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HomeIPShowReq.Unmarshal(m, b)
}
func (m *HomeIPShowReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HomeIPShowReq.Marshal(b, m, deterministic)
}
func (m *HomeIPShowReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HomeIPShowReq.Merge(m, src)
}
func (m *HomeIPShowReq) XXX_Size() int {
	return xxx_messageInfo_HomeIPShowReq.Size(m)
}
func (m *HomeIPShowReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HomeIPShowReq.DiscardUnknown(m)
}

var xxx_messageInfo_HomeIPShowReq proto.InternalMessageInfo

func (m *HomeIPShowReq) GetNbsaddr() string {
	if m != nil {
		return m.Nbsaddr
	}
	return ""
}

type HomeIPRemoveReq struct {
	Nbsaddr              string   `protobuf:"bytes,1,opt,name=nbsaddr,proto3" json:"nbsaddr,omitempty"`
	Ipaddr               string   `protobuf:"bytes,2,opt,name=ipaddr,proto3" json:"ipaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HomeIPRemoveReq) Reset()         { *m = HomeIPRemoveReq{} }
func (m *HomeIPRemoveReq) String() string { return proto.CompactTextString(m) }
func (*HomeIPRemoveReq) ProtoMessage()    {}
func (*HomeIPRemoveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_08ae62cb4bdd4ec2, []int{1}
}

func (m *HomeIPRemoveReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HomeIPRemoveReq.Unmarshal(m, b)
}
func (m *HomeIPRemoveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HomeIPRemoveReq.Marshal(b, m, deterministic)
}
func (m *HomeIPRemoveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HomeIPRemoveReq.Merge(m, src)
}
func (m *HomeIPRemoveReq) XXX_Size() int {
	return xxx_messageInfo_HomeIPRemoveReq.Size(m)
}
func (m *HomeIPRemoveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HomeIPRemoveReq.DiscardUnknown(m)
}

var xxx_messageInfo_HomeIPRemoveReq proto.InternalMessageInfo

func (m *HomeIPRemoveReq) GetNbsaddr() string {
	if m != nil {
		return m.Nbsaddr
	}
	return ""
}

func (m *HomeIPRemoveReq) GetIpaddr() string {
	if m != nil {
		return m.Ipaddr
	}
	return ""
}

func init() {
	proto.RegisterType((*HomeIPShowReq)(nil), "rpccmdservice.HomeIPShowReq")
	proto.RegisterType((*HomeIPRemoveReq)(nil), "rpccmdservice.HomeIPRemoveReq")
}

func init() { proto.RegisterFile("homeip.proto", fileDescriptor_08ae62cb4bdd4ec2) }

var fileDescriptor_08ae62cb4bdd4ec2 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0xc8, 0xcf, 0x4d,
	0xcd, 0x2c, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2d, 0x2a, 0x48, 0x4e, 0xce, 0x4d,
	0x29, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x95, 0xe2, 0x4d, 0x49, 0x4d, 0x4b, 0x2c, 0xcd, 0x29,
	0x81, 0xc8, 0x2a, 0x69, 0x72, 0xf1, 0x7a, 0xe4, 0xe7, 0xa6, 0x7a, 0x06, 0x04, 0x67, 0xe4, 0x97,
	0x07, 0xa5, 0x16, 0x0a, 0x49, 0x70, 0xb1, 0xe7, 0x25, 0x15, 0x27, 0xa6, 0xa4, 0x14, 0x49, 0x30,
	0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x4a, 0xce, 0x5c, 0xfc, 0x10, 0xa5, 0x41, 0xa9, 0xb9,
	0xf9, 0x65, 0xa9, 0x78, 0x15, 0x0b, 0x89, 0x71, 0xb1, 0x65, 0x16, 0x80, 0x25, 0x98, 0xc0, 0x12,
	0x50, 0x9e, 0x51, 0x24, 0xb2, 0x7d, 0xc1, 0x45, 0x65, 0x42, 0x1e, 0x5c, 0x5c, 0x20, 0x26, 0x44,
	0x50, 0x48, 0x46, 0x0f, 0xc5, 0xb5, 0x7a, 0x28, 0x6e, 0x93, 0x92, 0x42, 0x93, 0x75, 0x81, 0x78,
	0x25, 0x28, 0xb5, 0xb8, 0x40, 0x89, 0xc1, 0x28, 0x1e, 0xd5, 0x7d, 0x20, 0xc3, 0x7d, 0xb8, 0x78,
	0x20, 0x1c, 0xa8, 0xf1, 0x72, 0x58, 0x8d, 0x87, 0xfb, 0x07, 0xbf, 0x05, 0x49, 0x6c, 0xe0, 0x20,
	0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x09, 0xdd, 0x5c, 0x60, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HomeIPShowSrvClient is the client API for HomeIPShowSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HomeIPShowSrvClient interface {
	ShowHomeIP(ctx context.Context, in *HomeIPShowReq, opts ...grpc.CallOption) (*DefaultResp, error)
}

type homeIPShowSrvClient struct {
	cc *grpc.ClientConn
}

func NewHomeIPShowSrvClient(cc *grpc.ClientConn) HomeIPShowSrvClient {
	return &homeIPShowSrvClient{cc}
}

func (c *homeIPShowSrvClient) ShowHomeIP(ctx context.Context, in *HomeIPShowReq, opts ...grpc.CallOption) (*DefaultResp, error) {
	out := new(DefaultResp)
	err := c.cc.Invoke(ctx, "/rpccmdservice.HomeIPShowSrv/ShowHomeIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeIPShowSrvServer is the server API for HomeIPShowSrv service.
type HomeIPShowSrvServer interface {
	ShowHomeIP(context.Context, *HomeIPShowReq) (*DefaultResp, error)
}

func RegisterHomeIPShowSrvServer(s *grpc.Server, srv HomeIPShowSrvServer) {
	s.RegisterService(&_HomeIPShowSrv_serviceDesc, srv)
}

func _HomeIPShowSrv_ShowHomeIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeIPShowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeIPShowSrvServer).ShowHomeIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpccmdservice.HomeIPShowSrv/ShowHomeIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeIPShowSrvServer).ShowHomeIP(ctx, req.(*HomeIPShowReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HomeIPShowSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpccmdservice.HomeIPShowSrv",
	HandlerType: (*HomeIPShowSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowHomeIP",
			Handler:    _HomeIPShowSrv_ShowHomeIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "homeip.proto",
}

// HomeIPRemoveSrvClient is the client API for HomeIPRemoveSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HomeIPRemoveSrvClient interface {
	RemoveHomeIP(ctx context.Context, in *HomeIPRemoveReq, opts ...grpc.CallOption) (*DefaultResp, error)
}

type homeIPRemoveSrvClient struct {
	cc *grpc.ClientConn
}

func NewHomeIPRemoveSrvClient(cc *grpc.ClientConn) HomeIPRemoveSrvClient {
	return &homeIPRemoveSrvClient{cc}
}

func (c *homeIPRemoveSrvClient) RemoveHomeIP(ctx context.Context, in *HomeIPRemoveReq, opts ...grpc.CallOption) (*DefaultResp, error) {
	out := new(DefaultResp)
	err := c.cc.Invoke(ctx, "/rpccmdservice.HomeIPRemoveSrv/RemoveHomeIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeIPRemoveSrvServer is the server API for HomeIPRemoveSrv service.
type HomeIPRemoveSrvServer interface {
	RemoveHomeIP(context.Context, *HomeIPRemoveReq) (*DefaultResp, error)
}

func RegisterHomeIPRemoveSrvServer(s *grpc.Server, srv HomeIPRemoveSrvServer) {
	s.RegisterService(&_HomeIPRemoveSrv_serviceDesc, srv)
}

func _HomeIPRemoveSrv_RemoveHomeIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeIPRemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeIPRemoveSrvServer).RemoveHomeIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpccmdservice.HomeIPRemoveSrv/RemoveHomeIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeIPRemoveSrvServer).RemoveHomeIP(ctx, req.(*HomeIPRemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HomeIPRemoveSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpccmdservice.HomeIPRemoveSrv",
	HandlerType: (*HomeIPRemoveSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoveHomeIP",
			Handler:    _HomeIPRemoveSrv_RemoveHomeIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "homeip.proto",
}
