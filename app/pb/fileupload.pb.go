// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fileupload.proto

package rpccmdservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Fileuploadreq struct {
	Hostip               string   `protobuf:"bytes,1,opt,name=hostip,proto3" json:"hostip,omitempty"`
	Filepath             string   `protobuf:"bytes,2,opt,name=filepath,proto3" json:"filepath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Fileuploadreq) Reset()         { *m = Fileuploadreq{} }
func (m *Fileuploadreq) String() string { return proto.CompactTextString(m) }
func (*Fileuploadreq) ProtoMessage()    {}
func (*Fileuploadreq) Descriptor() ([]byte, []int) {
	return fileDescriptor_20606941c8ef41f6, []int{0}
}

func (m *Fileuploadreq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fileuploadreq.Unmarshal(m, b)
}
func (m *Fileuploadreq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fileuploadreq.Marshal(b, m, deterministic)
}
func (m *Fileuploadreq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fileuploadreq.Merge(m, src)
}
func (m *Fileuploadreq) XXX_Size() int {
	return xxx_messageInfo_Fileuploadreq.Size(m)
}
func (m *Fileuploadreq) XXX_DiscardUnknown() {
	xxx_messageInfo_Fileuploadreq.DiscardUnknown(m)
}

var xxx_messageInfo_Fileuploadreq proto.InternalMessageInfo

func (m *Fileuploadreq) GetHostip() string {
	if m != nil {
		return m.Hostip
	}
	return ""
}

func (m *Fileuploadreq) GetFilepath() string {
	if m != nil {
		return m.Filepath
	}
	return ""
}

func init() {
	proto.RegisterType((*Fileuploadreq)(nil), "rpccmdservice.fileuploadreq")
}

func init() { proto.RegisterFile("fileupload.proto", fileDescriptor_20606941c8ef41f6) }

var fileDescriptor_20606941c8ef41f6 = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xcb, 0xcc, 0x49,
	0x2d, 0x2d, 0xc8, 0xc9, 0x4f, 0x4c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2d, 0x2a,
	0x48, 0x4e, 0xce, 0x4d, 0x29, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x95, 0xe2, 0x4d, 0x49, 0x4d,
	0x4b, 0x2c, 0xcd, 0x29, 0x81, 0xc8, 0x2a, 0x39, 0x73, 0xf1, 0x22, 0x74, 0x14, 0xa5, 0x16, 0x0a,
	0x89, 0x71, 0xb1, 0x65, 0xe4, 0x17, 0x97, 0x64, 0x16, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06,
	0x41, 0x79, 0x42, 0x52, 0x5c, 0x1c, 0x20, 0x85, 0x05, 0x89, 0x25, 0x19, 0x12, 0x4c, 0x60, 0x19,
	0x38, 0xdf, 0x28, 0x12, 0xd9, 0x90, 0xe2, 0xa2, 0x32, 0x21, 0x0f, 0x2e, 0x2e, 0x08, 0x07, 0x24,
	0x2c, 0x24, 0xa3, 0x87, 0xe2, 0x04, 0x3d, 0x14, 0x0b, 0xa5, 0xa4, 0xd0, 0x64, 0x5d, 0x20, 0xee,
	0x0b, 0x4a, 0x2d, 0x2e, 0x50, 0x62, 0x48, 0x62, 0x03, 0x3b, 0xd3, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0xd3, 0xaa, 0x09, 0x62, 0xd8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FileuploadsrvClient is the client API for Fileuploadsrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileuploadsrvClient interface {
	Uploadfile(ctx context.Context, in *Fileuploadreq, opts ...grpc.CallOption) (*DefaultResp, error)
}

type fileuploadsrvClient struct {
	cc *grpc.ClientConn
}

func NewFileuploadsrvClient(cc *grpc.ClientConn) FileuploadsrvClient {
	return &fileuploadsrvClient{cc}
}

func (c *fileuploadsrvClient) Uploadfile(ctx context.Context, in *Fileuploadreq, opts ...grpc.CallOption) (*DefaultResp, error) {
	out := new(DefaultResp)
	err := c.cc.Invoke(ctx, "/rpccmdservice.fileuploadsrv/uploadfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileuploadsrvServer is the server API for Fileuploadsrv service.
type FileuploadsrvServer interface {
	Uploadfile(context.Context, *Fileuploadreq) (*DefaultResp, error)
}

func RegisterFileuploadsrvServer(s *grpc.Server, srv FileuploadsrvServer) {
	s.RegisterService(&_Fileuploadsrv_serviceDesc, srv)
}

func _Fileuploadsrv_Uploadfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fileuploadreq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileuploadsrvServer).Uploadfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpccmdservice.fileuploadsrv/Uploadfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileuploadsrvServer).Uploadfile(ctx, req.(*Fileuploadreq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fileuploadsrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpccmdservice.fileuploadsrv",
	HandlerType: (*FileuploadsrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "uploadfile",
			Handler:    _Fileuploadsrv_Uploadfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fileupload.proto",
}
