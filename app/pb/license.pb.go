// Code generated by protoc-gen-go. DO NOT EDIT.
// source: license.proto

package rpccmdservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LicenseReq struct {
	Op                   int32    `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"`
	Sofaaddress          string   `protobuf:"bytes,2,opt,name=sofaaddress,proto3" json:"sofaaddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LicenseReq) Reset()         { *m = LicenseReq{} }
func (m *LicenseReq) String() string { return proto.CompactTextString(m) }
func (*LicenseReq) ProtoMessage()    {}
func (*LicenseReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_090c1f856632b222, []int{0}
}

func (m *LicenseReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LicenseReq.Unmarshal(m, b)
}
func (m *LicenseReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LicenseReq.Marshal(b, m, deterministic)
}
func (m *LicenseReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseReq.Merge(m, src)
}
func (m *LicenseReq) XXX_Size() int {
	return xxx_messageInfo_LicenseReq.Size(m)
}
func (m *LicenseReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseReq.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseReq proto.InternalMessageInfo

func (m *LicenseReq) GetOp() int32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *LicenseReq) GetSofaaddress() string {
	if m != nil {
		return m.Sofaaddress
	}
	return ""
}

func init() {
	proto.RegisterType((*LicenseReq)(nil), "rpccmdservice.LicenseReq")
}

func init() { proto.RegisterFile("license.proto", fileDescriptor_090c1f856632b222) }

var fileDescriptor_090c1f856632b222 = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0xc9, 0x4c, 0x4e,
	0xcd, 0x2b, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2d, 0x2a, 0x48, 0x4e, 0xce,
	0x4d, 0x29, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x95, 0xe2, 0x4d, 0x49, 0x4d, 0x4b, 0x2c, 0xcd,
	0x29, 0x81, 0xc8, 0x2a, 0xd9, 0x71, 0x71, 0xf9, 0x40, 0x94, 0x07, 0xa5, 0x16, 0x0a, 0xf1, 0x71,
	0x31, 0xe5, 0x17, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x31, 0xe5, 0x17, 0x08, 0x29, 0x70,
	0x71, 0x17, 0xe7, 0xa7, 0x25, 0x26, 0xa6, 0xa4, 0x14, 0xa5, 0x16, 0x17, 0x4b, 0x30, 0x29, 0x30,
	0x6a, 0x70, 0x06, 0x21, 0x0b, 0x19, 0x05, 0xc1, 0xf5, 0x07, 0x17, 0x95, 0x09, 0xb9, 0x70, 0x71,
	0xfa, 0x17, 0x40, 0xf9, 0x42, 0x92, 0x7a, 0x28, 0x36, 0xeb, 0x21, 0xec, 0x91, 0x92, 0x42, 0x93,
	0x72, 0x81, 0xb8, 0x29, 0x28, 0xb5, 0xb8, 0x40, 0x89, 0x21, 0x89, 0x0d, 0xec, 0x34, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x02, 0xe6, 0x34, 0xc9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LicenseSrvClient is the client API for LicenseSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LicenseSrvClient interface {
	OpLicense(ctx context.Context, in *LicenseReq, opts ...grpc.CallOption) (*DefaultResp, error)
}

type licenseSrvClient struct {
	cc *grpc.ClientConn
}

func NewLicenseSrvClient(cc *grpc.ClientConn) LicenseSrvClient {
	return &licenseSrvClient{cc}
}

func (c *licenseSrvClient) OpLicense(ctx context.Context, in *LicenseReq, opts ...grpc.CallOption) (*DefaultResp, error) {
	out := new(DefaultResp)
	err := c.cc.Invoke(ctx, "/rpccmdservice.LicenseSrv/OpLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LicenseSrvServer is the server API for LicenseSrv service.
type LicenseSrvServer interface {
	OpLicense(context.Context, *LicenseReq) (*DefaultResp, error)
}

func RegisterLicenseSrvServer(s *grpc.Server, srv LicenseSrvServer) {
	s.RegisterService(&_LicenseSrv_serviceDesc, srv)
}

func _LicenseSrv_OpLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseSrvServer).OpLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpccmdservice.LicenseSrv/OpLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseSrvServer).OpLicense(ctx, req.(*LicenseReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _LicenseSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpccmdservice.LicenseSrv",
	HandlerType: (*LicenseSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpLicense",
			Handler:    _LicenseSrv_OpLicense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "license.proto",
}
