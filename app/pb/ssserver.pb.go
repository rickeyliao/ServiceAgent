// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ssserver.proto

package rpccmdservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SSServerReq struct {
	Op                   int32    `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"`
	Nationality          int32    `protobuf:"varint,2,opt,name=nationality,proto3" json:"nationality,omitempty"`
	Local                bool     `protobuf:"varint,3,opt,name=local,proto3" json:"local,omitempty"`
	Ip                   string   `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Nbsaddr              string   `protobuf:"bytes,5,opt,name=nbsaddr,proto3" json:"nbsaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSServerReq) Reset()         { *m = SSServerReq{} }
func (m *SSServerReq) String() string { return proto.CompactTextString(m) }
func (*SSServerReq) ProtoMessage()    {}
func (*SSServerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c36b9ef4225b6e0, []int{0}
}

func (m *SSServerReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSServerReq.Unmarshal(m, b)
}
func (m *SSServerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSServerReq.Marshal(b, m, deterministic)
}
func (m *SSServerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSServerReq.Merge(m, src)
}
func (m *SSServerReq) XXX_Size() int {
	return xxx_messageInfo_SSServerReq.Size(m)
}
func (m *SSServerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SSServerReq.DiscardUnknown(m)
}

var xxx_messageInfo_SSServerReq proto.InternalMessageInfo

func (m *SSServerReq) GetOp() int32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *SSServerReq) GetNationality() int32 {
	if m != nil {
		return m.Nationality
	}
	return 0
}

func (m *SSServerReq) GetLocal() bool {
	if m != nil {
		return m.Local
	}
	return false
}

func (m *SSServerReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *SSServerReq) GetNbsaddr() string {
	if m != nil {
		return m.Nbsaddr
	}
	return ""
}

func init() {
	proto.RegisterType((*SSServerReq)(nil), "rpccmdservice.SSServerReq")
}

func init() { proto.RegisterFile("ssserver.proto", fileDescriptor_1c36b9ef4225b6e0) }

var fileDescriptor_1c36b9ef4225b6e0 = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0xbf, 0x4e, 0xc7, 0x20,
	0x14, 0x85, 0x05, 0xad, 0x7f, 0x6e, 0xd3, 0x9a, 0x10, 0x07, 0xd2, 0x89, 0x74, 0xea, 0xd4, 0x41,
	0x5f, 0xa1, 0xf1, 0x01, 0x60, 0x72, 0xa4, 0x80, 0x09, 0x09, 0x16, 0x04, 0x34, 0x71, 0xf2, 0xd5,
	0x4d, 0x21, 0x4d, 0xea, 0x6f, 0x3c, 0xdf, 0xb9, 0xb9, 0x39, 0x1f, 0xf4, 0x29, 0x25, 0x13, 0xbf,
	0x4d, 0x9c, 0x43, 0xf4, 0xd9, 0x93, 0x2e, 0x06, 0xa5, 0x3e, 0xf4, 0xce, 0xac, 0x32, 0x43, 0xa7,
	0xcd, 0xbb, 0xfc, 0x72, 0xb9, 0xb6, 0xe3, 0x2f, 0xb4, 0x42, 0x88, 0x72, 0xcf, 0xcd, 0x27, 0xe9,
	0x01, 0xfb, 0x40, 0x11, 0x43, 0x53, 0xc3, 0xb1, 0x0f, 0x84, 0x41, 0xbb, 0xc9, 0x6c, 0xfd, 0x26,
	0x9d, 0xcd, 0x3f, 0x14, 0x97, 0xe2, 0x8c, 0xc8, 0x13, 0x34, 0xce, 0x2b, 0xe9, 0xe8, 0x35, 0x43,
	0xd3, 0x3d, 0xaf, 0x61, 0xff, 0x63, 0x03, 0xbd, 0x61, 0x68, 0x7a, 0xe0, 0xd8, 0x06, 0x42, 0xe1,
	0x6e, 0x5b, 0x93, 0xd4, 0x3a, 0xd2, 0xa6, 0xc0, 0x23, 0x3e, 0xbf, 0xc1, 0xe3, 0x31, 0x40, 0xd4,
	0x89, 0xe4, 0x15, 0xe0, 0x40, 0x8b, 0x27, 0xc3, 0xfc, 0x4f, 0x60, 0x3e, 0xcd, 0x1d, 0x2e, 0xbb,
	0xa5, 0xba, 0x71, 0x93, 0xc2, 0x78, 0xb5, 0xde, 0x16, 0xc5, 0x97, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x83, 0x1f, 0xdc, 0x1a, 0x12, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SSServerServiceClient is the client API for SSServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SSServerServiceClient interface {
	SSServerDo(ctx context.Context, in *SSServerReq, opts ...grpc.CallOption) (*DefaultResp, error)
}

type sSServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewSSServerServiceClient(cc *grpc.ClientConn) SSServerServiceClient {
	return &sSServerServiceClient{cc}
}

func (c *sSServerServiceClient) SSServerDo(ctx context.Context, in *SSServerReq, opts ...grpc.CallOption) (*DefaultResp, error) {
	out := new(DefaultResp)
	err := c.cc.Invoke(ctx, "/rpccmdservice.SSServerService/SSServerDo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSServerServiceServer is the server API for SSServerService service.
type SSServerServiceServer interface {
	SSServerDo(context.Context, *SSServerReq) (*DefaultResp, error)
}

func RegisterSSServerServiceServer(s *grpc.Server, srv SSServerServiceServer) {
	s.RegisterService(&_SSServerService_serviceDesc, srv)
}

func _SSServerService_SSServerDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSServerServiceServer).SSServerDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpccmdservice.SSServerService/SSServerDo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSServerServiceServer).SSServerDo(ctx, req.(*SSServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SSServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpccmdservice.SSServerService",
	HandlerType: (*SSServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SSServerDo",
			Handler:    _SSServerService_SSServerDo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ssserver.proto",
}
