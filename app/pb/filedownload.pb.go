// Code generated by protoc-gen-go. DO NOT EDIT.
// source: filedownload.proto

package rpccmdservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Filedownloadreq struct {
	Filehash             string   `protobuf:"bytes,1,opt,name=filehash,proto3" json:"filehash,omitempty"`
	Hostip               string   `protobuf:"bytes,2,opt,name=hostip,proto3" json:"hostip,omitempty"`
	Savepath             string   `protobuf:"bytes,3,opt,name=savepath,proto3" json:"savepath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Filedownloadreq) Reset()         { *m = Filedownloadreq{} }
func (m *Filedownloadreq) String() string { return proto.CompactTextString(m) }
func (*Filedownloadreq) ProtoMessage()    {}
func (*Filedownloadreq) Descriptor() ([]byte, []int) {
	return fileDescriptor_18fca90156c72b00, []int{0}
}

func (m *Filedownloadreq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filedownloadreq.Unmarshal(m, b)
}
func (m *Filedownloadreq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filedownloadreq.Marshal(b, m, deterministic)
}
func (m *Filedownloadreq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filedownloadreq.Merge(m, src)
}
func (m *Filedownloadreq) XXX_Size() int {
	return xxx_messageInfo_Filedownloadreq.Size(m)
}
func (m *Filedownloadreq) XXX_DiscardUnknown() {
	xxx_messageInfo_Filedownloadreq.DiscardUnknown(m)
}

var xxx_messageInfo_Filedownloadreq proto.InternalMessageInfo

func (m *Filedownloadreq) GetFilehash() string {
	if m != nil {
		return m.Filehash
	}
	return ""
}

func (m *Filedownloadreq) GetHostip() string {
	if m != nil {
		return m.Hostip
	}
	return ""
}

func (m *Filedownloadreq) GetSavepath() string {
	if m != nil {
		return m.Savepath
	}
	return ""
}

func init() {
	proto.RegisterType((*Filedownloadreq)(nil), "rpccmdservice.filedownloadreq")
}

func init() { proto.RegisterFile("filedownload.proto", fileDescriptor_18fca90156c72b00) }

var fileDescriptor_18fca90156c72b00 = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0xcb, 0xcc, 0x49,
	0x4d, 0xc9, 0x2f, 0xcf, 0xcb, 0xc9, 0x4f, 0x4c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x2d, 0x2a, 0x48, 0x4e, 0xce, 0x4d, 0x29, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x95, 0xe2, 0x4d,
	0x49, 0x4d, 0x4b, 0x2c, 0xcd, 0x29, 0x81, 0xc8, 0x2a, 0x25, 0x72, 0xf1, 0x23, 0xeb, 0x29, 0x4a,
	0x2d, 0x14, 0x92, 0xe2, 0xe2, 0x00, 0x09, 0x65, 0x24, 0x16, 0x67, 0x48, 0x30, 0x2a, 0x30, 0x6a,
	0x70, 0x06, 0xc1, 0xf9, 0x42, 0x62, 0x5c, 0x6c, 0x19, 0xf9, 0xc5, 0x25, 0x99, 0x05, 0x12, 0x4c,
	0x60, 0x19, 0x28, 0x0f, 0xa4, 0xa7, 0x38, 0xb1, 0x2c, 0xb5, 0x20, 0xb1, 0x24, 0x43, 0x82, 0x19,
	0xa2, 0x07, 0xc6, 0x37, 0x4a, 0xe0, 0x12, 0x00, 0xe9, 0x2f, 0x85, 0xd9, 0x51, 0x5c, 0x54, 0x26,
	0xe4, 0xc3, 0xc5, 0x03, 0xe3, 0x82, 0xe4, 0x84, 0xe4, 0xf4, 0x50, 0x5c, 0xa9, 0x87, 0xe6, 0x26,
	0x29, 0x29, 0x34, 0x79, 0x17, 0x88, 0x27, 0x82, 0x52, 0x8b, 0x0b, 0x94, 0x18, 0x92, 0xd8, 0xc0,
	0x7e, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x54, 0xb2, 0x69, 0x4b, 0xff, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FileudownloadsrvClient is the client API for Fileudownloadsrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileudownloadsrvClient interface {
	Downloadfile(ctx context.Context, in *Filedownloadreq, opts ...grpc.CallOption) (*DefaultResp, error)
}

type fileudownloadsrvClient struct {
	cc *grpc.ClientConn
}

func NewFileudownloadsrvClient(cc *grpc.ClientConn) FileudownloadsrvClient {
	return &fileudownloadsrvClient{cc}
}

func (c *fileudownloadsrvClient) Downloadfile(ctx context.Context, in *Filedownloadreq, opts ...grpc.CallOption) (*DefaultResp, error) {
	out := new(DefaultResp)
	err := c.cc.Invoke(ctx, "/rpccmdservice.fileudownloadsrv/downloadfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileudownloadsrvServer is the server API for Fileudownloadsrv service.
type FileudownloadsrvServer interface {
	Downloadfile(context.Context, *Filedownloadreq) (*DefaultResp, error)
}

func RegisterFileudownloadsrvServer(s *grpc.Server, srv FileudownloadsrvServer) {
	s.RegisterService(&_Fileudownloadsrv_serviceDesc, srv)
}

func _Fileudownloadsrv_Downloadfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filedownloadreq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileudownloadsrvServer).Downloadfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpccmdservice.fileudownloadsrv/Downloadfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileudownloadsrvServer).Downloadfile(ctx, req.(*Filedownloadreq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fileudownloadsrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpccmdservice.fileudownloadsrv",
	HandlerType: (*FileudownloadsrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "downloadfile",
			Handler:    _Fileudownloadsrv_Downloadfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filedownload.proto",
}
