// Code generated by go-bindata.
// sources:
// wifiap/staticfile/change2eth.sh
// wifiap/staticfile/change2ppp.sh
// wifiap/staticfile/fcl.config.eth0
// wifiap/staticfile/fcl.config.ppp0
// wifiap/staticfile/rc.local.eth0
// wifiap/staticfile/rc.local.ppp0
// DO NOT EDIT!

package control

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wifiapStaticfileChange2ethSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x2f\xce\xe0\xe2\xe2\x4a\x2e\x50\x50\x31\xd4\x4f\x4b\xce\xd1\x4b\xce\xcf\x4b\xcb\x4c\xd7\x4b\x2d\xc9\x30\x50\xd0\x2f\xca\xcf\x2f\xd1\xd7\x4b\x4b\xce\x41\x92\x82\xaa\x2d\x4a\xd6\xcb\xc9\x4f\x4e\xcc\x81\xaa\x4c\x2d\x49\x86\x0b\x71\x71\x01\x02\x00\x00\xff\xff\x26\xa8\x39\x45\x5b\x00\x00\x00")

func wifiapStaticfileChange2ethShBytes() ([]byte, error) {
	return bindataRead(
		_wifiapStaticfileChange2ethSh,
		"wifiap/staticfile/change2eth.sh",
	)
}

func wifiapStaticfileChange2ethSh() (*asset, error) {
	bytes, err := wifiapStaticfileChange2ethShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wifiap/staticfile/change2eth.sh", size: 91, mode: os.FileMode(493), modTime: time.Unix(1572660531, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wifiapStaticfileChange2pppSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x2f\xce\xe0\xe2\xe2\x4a\x2e\x50\x50\x31\xd4\x4f\x4b\xce\xd1\x4b\xce\xcf\x4b\xcb\x4c\xd7\x2b\x28\x28\x30\x50\xd0\x2f\xca\xcf\x2f\xd1\xd7\x4b\x4b\xce\x41\x92\x82\xaa\x2d\x4a\xd6\xcb\xc9\x4f\x4e\xcc\x81\xaa\x4c\x2d\x49\x86\x0b\x71\x71\x01\x02\x00\x00\xff\xff\xed\xe8\x27\x30\x5b\x00\x00\x00")

func wifiapStaticfileChange2pppShBytes() ([]byte, error) {
	return bindataRead(
		_wifiapStaticfileChange2pppSh,
		"wifiap/staticfile/change2ppp.sh",
	)
}

func wifiapStaticfileChange2pppSh() (*asset, error) {
	bytes, err := wifiapStaticfileChange2pppShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wifiap/staticfile/change2ppp.sh", size: 91, mode: os.FileMode(493), modTime: time.Unix(1572660555, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wifiapStaticfileFclConfigEth0 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\xc1\x6e\xe2\x30\x10\x3d\x3b\x5f\x11\xf9\x0c\x09\xa0\x5d\xa1\xe5\x16\x09\x76\xb5\x87\x25\x6c\x00\xed\x61\x55\xa1\xc1\xb1\xc1\xed\xc4\x71\x63\x87\x1e\xaa\xfe\x7b\xe5\xe0\x54\x41\x0d\xad\xca\x21\xd2\xf8\x79\xde\x1b\xbf\xc9\x7b\x0e\x08\xcd\xf7\x42\x22\x57\x50\x70\x3a\x0b\xa9\x60\xc8\x4a\x25\xe4\x81\x0e\x02\x42\x6b\x8d\x52\x3d\x38\x9c\xdb\xe3\xa8\x81\xb0\x64\x80\x8a\x5b\xa9\xac\x70\x17\x4f\x08\xea\x7c\x23\x10\x0e\xdf\x0e\x74\x16\x0a\x40\xc3\x1d\x92\x73\x01\x35\x5a\xa9\x6d\x55\xa3\x93\xff\x1f\x10\xe2\x3e\x42\x87\x36\x74\x24\x42\xa8\x90\x68\x79\xe5\x0f\xc3\x95\x2f\x7e\xa6\xd9\xbf\x24\x9b\xfb\xd3\x3c\x4b\x57\x34\x20\xe4\x6e\xd0\x23\xa0\xc0\xb6\xec\xc4\x17\xab\x74\xbd\xc9\xd2\xed\xe6\xf7\xf2\x57\x7b\x55\xfa\xa2\x35\xe2\xb0\x7b\x5f\xfc\x49\xd6\x7f\xb7\x8b\x2c\x99\x2f\xae\x0e\xb9\x7c\xe5\xd2\x17\xc0\x18\xd7\x76\x27\xf5\x0e\xf2\xbc\xe2\xc6\xdc\xc6\x2f\x80\x7d\x51\x20\xe9\x5d\xd3\x50\xf6\x98\x6c\x8d\xbf\xfd\xa8\xae\xf3\x5b\x0d\x7c\x32\xff\x62\xd6\x47\x9b\xbf\xb2\x80\xa0\x79\x03\xad\x0d\xaf\x3a\xe1\x69\x30\x03\x27\x3e\x71\x89\xed\x06\xad\x00\xe6\xe8\x76\x8f\x2e\x92\x3d\xa2\xae\x49\xea\xf7\x3d\x1d\xe3\x4d\x60\x8f\x4c\x23\x07\xc3\xfd\x00\x1a\x9f\xa0\x8a\x51\xee\xe3\x42\x1a\x16\xe7\xca\x14\x60\x1e\xa3\xa6\xe5\xcc\x60\x45\x8e\xd2\x58\xae\x74\x59\x59\x3a\x0b\x7f\x7c\x9f\x4c\x2f\x70\xa9\x9d\xce\x78\x32\x8d\x46\xd1\x28\x1a\xd3\xe0\x25\x78\x0d\x00\x00\xff\xff\x9a\xab\xe1\xd9\x76\x03\x00\x00")

func wifiapStaticfileFclConfigEth0Bytes() ([]byte, error) {
	return bindataRead(
		_wifiapStaticfileFclConfigEth0,
		"wifiap/staticfile/fcl.config.eth0",
	)
}

func wifiapStaticfileFclConfigEth0() (*asset, error) {
	bytes, err := wifiapStaticfileFclConfigEth0Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wifiap/staticfile/fcl.config.eth0", size: 886, mode: os.FileMode(493), modTime: time.Unix(1572654850, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wifiapStaticfileFclConfigPpp0 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\xc1\x6e\xe2\x30\x10\x3d\x3b\x5f\x11\xf9\x0c\x09\xa0\x5d\xa1\xcd\x2d\x12\xec\x6a\x0f\x4b\xd8\x00\xea\xa1\xaa\xd0\xe0\xd8\xd4\xed\xc4\x71\x63\x87\x1e\xaa\xfe\x7b\xe5\xe0\x54\xa0\x86\x56\xe5\x10\x69\xfc\x3c\xef\x8d\xdf\xe4\xbd\x04\x84\x16\x3b\x21\x91\x2b\x28\x39\x4d\x42\x2a\x18\xb2\x4a\x09\xb9\xa7\x83\x80\xd0\x46\xa3\x54\x8f\x0e\xd7\x5a\x8f\x5a\x08\x2b\x06\xa8\xb8\x95\xca\x0a\x77\xf1\x8c\xa0\x8e\x37\x02\x61\xff\x63\x4f\x93\xd0\xd6\x0d\x77\x40\xc1\x05\x34\x68\xa5\xb6\x75\x83\x4e\xfd\x36\x20\xc4\x7d\x84\x0e\x6d\xe8\x38\x84\x50\x21\xd1\xf2\xda\x1f\x86\x4b\x5f\xfc\xce\xf2\x9b\x34\x9f\xf9\xd3\x2c\xcf\x96\x34\x20\xe4\x6e\xd0\x23\xa0\xc0\x76\xec\xd4\x17\xcb\x6c\xb5\xce\xb3\xcd\xfa\xef\xe2\x4f\x77\x55\xf9\xa2\xf3\xe1\xb0\x07\x5f\xfc\x4b\x57\xff\x37\xf3\x3c\x9d\xcd\x2f\x0e\x39\x7f\xe5\xc2\x17\xc0\x18\xd7\x76\x2b\xf5\x16\x8a\xa2\xe6\xc6\x5c\xc7\x2f\x81\x7d\x53\x20\xed\x5d\xd3\x50\xf6\x98\xec\x8c\xbf\xff\xa7\x53\xe7\xd7\x1a\xf8\x62\xfe\xd9\xac\xcf\x36\x7f\x61\x01\x41\xfb\x06\xda\x18\x5e\x9f\x84\xa7\xc5\x0c\x1c\xf8\xc4\x05\x96\x26\xa1\x00\x34\x6d\xd0\x4a\x60\x8e\x6e\x77\xe8\x12\xd9\x23\xea\x9a\xa4\xfe\xd8\x73\x62\xbc\x0d\xec\x3d\xd3\xc8\xc1\x70\x3f\x80\xc6\x07\xa8\x63\x94\xbb\xb8\x94\x86\xc5\x85\x32\x25\x98\xa7\xa8\x6d\x39\x32\x58\x59\xa0\x34\x96\x2b\x5d\xd5\x96\x26\xe1\xaf\x9f\x93\xe9\x19\x2e\xb5\xd3\x19\x4f\xa6\xd1\x28\x1a\x45\x63\x1a\xbc\xbe\x05\x00\x00\xff\xff\x30\xbc\x1b\x73\x74\x03\x00\x00")

func wifiapStaticfileFclConfigPpp0Bytes() ([]byte, error) {
	return bindataRead(
		_wifiapStaticfileFclConfigPpp0,
		"wifiap/staticfile/fcl.config.ppp0",
	)
}

func wifiapStaticfileFclConfigPpp0() (*asset, error) {
	bytes, err := wifiapStaticfileFclConfigPpp0Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wifiap/staticfile/fcl.config.ppp0", size: 884, mode: os.FileMode(493), modTime: time.Unix(1572654584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wifiapStaticfileRcLocalEth0 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x6f\xd4\x3c\x10\xc6\xef\xfe\x14\xcf\x1b\xf7\xad\xe0\x90\xa4\xbb\x50\x40\x42\xec\x81\xdb\x1e\x2a\xed\x81\x1b\xa0\x95\x63\x4f\xd6\x06\xc7\x8e\x3c\xf6\xfe\x91\xfa\xe1\x51\x92\x6d\xd5\x22\x71\xf2\x8c\xc7\xcf\xcf\xcf\xd8\x23\xff\x6b\x3b\x17\x5a\xb6\xa8\x49\x48\x21\x91\x74\xe3\xa3\x56\x7e\x4e\xbe\x59\xc7\x60\x9d\xdc\x98\xe1\x18\x74\x26\x5d\x32\x19\xa8\x8c\x6c\x09\x14\x0c\x62\x0f\x52\xda\x62\x28\x3e\xbb\xc2\x94\x90\x4a\xf0\x74\x24\xdf\x08\x89\x07\xf5\x9b\xc0\x25\x11\xb2\xbd\x8a\xae\xb8\x93\xf3\x1e\x15\x9d\x5d\xc6\x5d\x85\x18\xc0\x45\x6b\x62\x46\x4c\x50\xe1\x82\x98\x2d\x25\x21\x71\x54\xbe\xd0\x54\xa7\x94\x62\x6a\x66\x5b\xdb\x80\x98\x0c\x25\xe4\x08\x0a\xaa\xf3\x34\xa9\x8c\xe3\x39\xcc\x2f\x4c\xff\x2a\x9c\xa1\xad\x0a\x07\x5a\x1c\xcf\x1d\xb8\x18\x84\x44\xe7\x32\x2f\xbc\xaf\x17\x18\xea\x55\xf1\xf9\x95\xd8\x44\x62\x84\x98\xad\x0b\x87\x46\x08\x89\x5d\x72\x61\x69\x62\xbb\x83\x32\x26\x11\xb3\x90\xfb\xed\xee\xcb\xcd\x1b\x1b\x39\x07\x35\x10\xea\xed\x5b\x3c\x3e\x22\xa7\x42\x42\xba\x1e\xdf\x51\xdd\xec\xb7\xbb\x0a\x3f\x3f\x4f\xd2\xe9\x66\x8c\x13\xa8\x47\xf5\x70\x79\x41\x9a\x5e\xf8\x7f\xfe\x11\xaa\xab\x40\xc8\xde\x09\x21\x0b\x77\xfb\x21\x1a\xe2\x93\xcb\xda\xa2\x3e\xe2\xee\xbc\x5a\x9b\x15\xea\x71\x8a\xee\xf5\x0a\x75\x59\x0b\x21\x43\xb4\x65\xc4\xe9\x68\x9c\xf2\xd8\xb4\x79\x68\x97\xb8\xf1\xf1\x80\xf5\xe6\x76\x85\x5b\x21\x96\x43\x6d\xe1\xd4\xf2\xf4\xf1\x93\x6d\x35\x1a\xb4\x94\xf5\x53\xf2\xb4\x36\x3a\x86\x7e\x26\x8d\xcf\x5b\xff\x60\xcd\x23\x33\x4f\xd2\xe0\x02\xa5\x7d\x31\x23\xea\x01\xab\xf5\xbb\xf7\xf7\x1f\x3e\x7e\xc2\x06\x33\xe5\xb9\xf8\x8a\xf3\x17\x21\x74\xcc\x0a\x46\xd1\x10\x83\x10\xcb\x84\x88\x3f\x01\x00\x00\xff\xff\x67\x4b\x6c\x22\xa8\x02\x00\x00")

func wifiapStaticfileRcLocalEth0Bytes() ([]byte, error) {
	return bindataRead(
		_wifiapStaticfileRcLocalEth0,
		"wifiap/staticfile/rc.local.eth0",
	)
}

func wifiapStaticfileRcLocalEth0() (*asset, error) {
	bytes, err := wifiapStaticfileRcLocalEth0Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wifiap/staticfile/rc.local.eth0", size: 680, mode: os.FileMode(493), modTime: time.Unix(1572663266, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wifiapStaticfileRcLocalPpp0 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x6f\xd4\x30\x10\xc5\xef\xfe\x14\x8f\xb8\x54\x70\x48\xd2\x5d\x28\x20\x21\x7a\xe0\xb6\x87\x4a\x7b\xe0\x06\x68\xe5\xd8\x93\xb5\xc1\xb1\x23\x8f\xbd\x7f\xa4\x7e\x78\x94\x64\x17\xb5\x48\x9c\x3c\xe3\xf1\xfb\xf9\x8d\x3d\xf2\x55\xdb\xb9\xd0\xb2\x45\x4d\x42\x0a\x89\xa4\x1b\x1f\xb5\xf2\x73\xf2\xcd\x3a\x06\xeb\xe4\xc6\x0c\xc7\xa0\x13\xe9\x92\xc9\x40\x65\x64\x4b\xa0\x60\x10\x7b\x90\xd2\x16\x43\xf1\xd9\x15\xa6\x84\x54\x82\xa7\x03\xf9\x46\x48\x3c\xaa\xdf\x04\x2e\x89\x90\xed\x45\x74\xc1\x1d\x9d\xf7\xa8\xe8\xe4\x32\xee\x2a\xc4\x00\x2e\x5a\x13\x33\x62\x82\x0a\x67\xc4\x6c\x29\x09\x89\x83\xf2\x85\xa6\x3a\xa5\x14\x53\x33\xdb\xda\x04\xc4\x64\x28\x21\x47\x50\x50\x9d\xa7\x49\x65\x1c\xcf\x61\x7e\x66\xfa\x57\xe1\x0c\x6d\x55\xd8\xd3\xe2\x78\xee\xc0\xc5\x20\x24\x3a\x97\x79\xe1\x7d\x3d\xc3\x50\xaf\x8a\xcf\x2f\xc4\x26\x12\x23\xc4\x6c\x5d\xd8\x37\x42\x48\x6c\x93\x0b\x4b\x13\x9b\x2d\x94\x31\x89\x98\x85\xdc\x6d\xb6\x5f\x6e\xde\xd8\xc8\x39\xa8\x81\x50\x6f\xde\xe2\xe9\x09\x39\x15\x12\xd2\xf5\xf8\x8e\xea\x66\xb7\xd9\x56\xf8\xf9\x79\x92\x4e\x37\x63\x9c\x40\x3d\xaa\xc7\xf3\x33\xd2\xf4\xc2\xaf\xf9\x47\xa8\x2e\x02\x21\x7b\x27\x44\xe1\x6e\x37\x44\x43\x7c\x74\x59\x5b\xd4\x07\xdc\x9d\x56\x6b\xb3\x42\x3d\x4e\xd1\xbd\x5e\xa1\x2e\x6b\x21\x42\xb4\x65\xc4\xf1\x60\x9c\xf2\x78\x68\xf3\x30\xb6\x4b\xd2\xf8\xb8\xc7\xfa\xe1\x76\x85\xdb\xeb\xa9\xb6\x70\x6a\x79\xfa\xf7\xc9\xb5\x1a\x0d\x5a\xca\xfa\x9a\x5c\xd7\x46\xc7\xd0\x5f\x50\xd7\xad\xff\xb0\xe6\x89\x99\x07\x69\x70\x81\xd2\xae\x98\x11\xf5\x80\xd5\xfa\xdd\xfb\xfb\x0f\x1f\x3f\xe1\x01\x33\xe5\x6f\xf1\x05\x47\xfc\x83\x08\x1d\xb3\x82\x51\x34\xc4\x20\xc4\x32\x21\xe2\x4f\x00\x00\x00\xff\xff\x6f\x9f\xf1\x5a\xa8\x02\x00\x00")

func wifiapStaticfileRcLocalPpp0Bytes() ([]byte, error) {
	return bindataRead(
		_wifiapStaticfileRcLocalPpp0,
		"wifiap/staticfile/rc.local.ppp0",
	)
}

func wifiapStaticfileRcLocalPpp0() (*asset, error) {
	bytes, err := wifiapStaticfileRcLocalPpp0Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wifiap/staticfile/rc.local.ppp0", size: 680, mode: os.FileMode(493), modTime: time.Unix(1572663266, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wifiap/staticfile/change2eth.sh": wifiapStaticfileChange2ethSh,
	"wifiap/staticfile/change2ppp.sh": wifiapStaticfileChange2pppSh,
	"wifiap/staticfile/fcl.config.eth0": wifiapStaticfileFclConfigEth0,
	"wifiap/staticfile/fcl.config.ppp0": wifiapStaticfileFclConfigPpp0,
	"wifiap/staticfile/rc.local.eth0": wifiapStaticfileRcLocalEth0,
	"wifiap/staticfile/rc.local.ppp0": wifiapStaticfileRcLocalPpp0,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wifiap": &bintree{nil, map[string]*bintree{
		"staticfile": &bintree{nil, map[string]*bintree{
			"change2eth.sh": &bintree{wifiapStaticfileChange2ethSh, map[string]*bintree{}},
			"change2ppp.sh": &bintree{wifiapStaticfileChange2pppSh, map[string]*bintree{}},
			"fcl.config.eth0": &bintree{wifiapStaticfileFclConfigEth0, map[string]*bintree{}},
			"fcl.config.ppp0": &bintree{wifiapStaticfileFclConfigPpp0, map[string]*bintree{}},
			"rc.local.eth0": &bintree{wifiapStaticfileRcLocalEth0, map[string]*bintree{}},
			"rc.local.ppp0": &bintree{wifiapStaticfileRcLocalPpp0, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

